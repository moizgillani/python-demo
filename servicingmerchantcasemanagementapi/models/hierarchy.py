# -*- coding: utf-8 -*-

"""
servicingmerchantcasemanagementapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from servicingmerchantcasemanagementapi.api_helper import APIHelper


class Hierarchy(object):

    """Implementation of the 'Hierarchy' model.

    TODO: type model description here.

    Attributes:
        sales_organization_code (str): Sales Organization Code
        sales_organization_name (str): Sales organization name
        sales_channel_code (str): Sales channel code
        sales_channel_name (str): Sales channel name
        partner_id (str): The identifier associated with the partner group
        partner_name (str): The name of the partner's group
        region_code (str): Region Code
        region_name (str): Region Name
        national_code (str): National code
        national_name (str): National name
        division_code (str): Division Code
        division_name (str): The name associated with a given partner
            division
        super_chain_code (str): Super chain code
        super_chain_name (str): Super chain name
        store_number (str): The identifier code of a store under a given
            partner chain. Can store alphanumber value when creating the
            store
        store_name (str): The name associated with a store under a given
            partner chain
        chain_code (str): The Chain Code is the level of the merchant
            hierarchy that groups merchant identifiers (MIDs) and any related
            roll-up values under a common identifier for settlement, billing
            and reporting. Chain Code is the primary identifier for merchants
            boarded in MDB (Merchant Database) system.
        chain_name (str): The name associated with a given merchant under a
            chain-level hierarchy
        merchant_id (str): The identifier code associated with a given
            merchant under a store-level hierarchy
        merchant_name (str): The name associated with a given merchant under a
            store-level hierarchy

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "sales_organization_code": 'salesOrganizationCode',
        "sales_organization_name": 'salesOrganizationName',
        "sales_channel_code": 'salesChannelCode',
        "sales_channel_name": 'salesChannelName',
        "partner_id": 'partnerId',
        "partner_name": 'partnerName',
        "region_code": 'regionCode',
        "region_name": 'regionName',
        "national_code": 'nationalCode',
        "national_name": 'nationalName',
        "division_code": 'divisionCode',
        "division_name": 'divisionName',
        "super_chain_code": 'superChainCode',
        "super_chain_name": 'superChainName',
        "store_number": 'storeNumber',
        "store_name": 'storeName',
        "chain_code": 'chainCode',
        "chain_name": 'chainName',
        "merchant_id": 'merchantId',
        "merchant_name": 'merchantName'
    }

    _optionals = [
        'sales_organization_code',
        'sales_organization_name',
        'sales_channel_code',
        'sales_channel_name',
        'partner_id',
        'partner_name',
        'region_code',
        'region_name',
        'national_code',
        'national_name',
        'division_code',
        'division_name',
        'super_chain_code',
        'super_chain_name',
        'store_number',
        'store_name',
        'chain_code',
        'chain_name',
        'merchant_id',
        'merchant_name',
    ]

    def __init__(self,
                 sales_organization_code=APIHelper.SKIP,
                 sales_organization_name=APIHelper.SKIP,
                 sales_channel_code=APIHelper.SKIP,
                 sales_channel_name=APIHelper.SKIP,
                 partner_id=APIHelper.SKIP,
                 partner_name=APIHelper.SKIP,
                 region_code=APIHelper.SKIP,
                 region_name=APIHelper.SKIP,
                 national_code=APIHelper.SKIP,
                 national_name=APIHelper.SKIP,
                 division_code=APIHelper.SKIP,
                 division_name=APIHelper.SKIP,
                 super_chain_code=APIHelper.SKIP,
                 super_chain_name=APIHelper.SKIP,
                 store_number=APIHelper.SKIP,
                 store_name=APIHelper.SKIP,
                 chain_code=APIHelper.SKIP,
                 chain_name=APIHelper.SKIP,
                 merchant_id=APIHelper.SKIP,
                 merchant_name=APIHelper.SKIP):
        """Constructor for the Hierarchy class"""

        # Initialize members of the class
        if sales_organization_code is not APIHelper.SKIP:
            self.sales_organization_code = sales_organization_code 
        if sales_organization_name is not APIHelper.SKIP:
            self.sales_organization_name = sales_organization_name 
        if sales_channel_code is not APIHelper.SKIP:
            self.sales_channel_code = sales_channel_code 
        if sales_channel_name is not APIHelper.SKIP:
            self.sales_channel_name = sales_channel_name 
        if partner_id is not APIHelper.SKIP:
            self.partner_id = partner_id 
        if partner_name is not APIHelper.SKIP:
            self.partner_name = partner_name 
        if region_code is not APIHelper.SKIP:
            self.region_code = region_code 
        if region_name is not APIHelper.SKIP:
            self.region_name = region_name 
        if national_code is not APIHelper.SKIP:
            self.national_code = national_code 
        if national_name is not APIHelper.SKIP:
            self.national_name = national_name 
        if division_code is not APIHelper.SKIP:
            self.division_code = division_code 
        if division_name is not APIHelper.SKIP:
            self.division_name = division_name 
        if super_chain_code is not APIHelper.SKIP:
            self.super_chain_code = super_chain_code 
        if super_chain_name is not APIHelper.SKIP:
            self.super_chain_name = super_chain_name 
        if store_number is not APIHelper.SKIP:
            self.store_number = store_number 
        if store_name is not APIHelper.SKIP:
            self.store_name = store_name 
        if chain_code is not APIHelper.SKIP:
            self.chain_code = chain_code 
        if chain_name is not APIHelper.SKIP:
            self.chain_name = chain_name 
        if merchant_id is not APIHelper.SKIP:
            self.merchant_id = merchant_id 
        if merchant_name is not APIHelper.SKIP:
            self.merchant_name = merchant_name 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        sales_organization_code = dictionary.get("salesOrganizationCode") if dictionary.get("salesOrganizationCode") else APIHelper.SKIP
        sales_organization_name = dictionary.get("salesOrganizationName") if dictionary.get("salesOrganizationName") else APIHelper.SKIP
        sales_channel_code = dictionary.get("salesChannelCode") if dictionary.get("salesChannelCode") else APIHelper.SKIP
        sales_channel_name = dictionary.get("salesChannelName") if dictionary.get("salesChannelName") else APIHelper.SKIP
        partner_id = dictionary.get("partnerId") if dictionary.get("partnerId") else APIHelper.SKIP
        partner_name = dictionary.get("partnerName") if dictionary.get("partnerName") else APIHelper.SKIP
        region_code = dictionary.get("regionCode") if dictionary.get("regionCode") else APIHelper.SKIP
        region_name = dictionary.get("regionName") if dictionary.get("regionName") else APIHelper.SKIP
        national_code = dictionary.get("nationalCode") if dictionary.get("nationalCode") else APIHelper.SKIP
        national_name = dictionary.get("nationalName") if dictionary.get("nationalName") else APIHelper.SKIP
        division_code = dictionary.get("divisionCode") if dictionary.get("divisionCode") else APIHelper.SKIP
        division_name = dictionary.get("divisionName") if dictionary.get("divisionName") else APIHelper.SKIP
        super_chain_code = dictionary.get("superChainCode") if dictionary.get("superChainCode") else APIHelper.SKIP
        super_chain_name = dictionary.get("superChainName") if dictionary.get("superChainName") else APIHelper.SKIP
        store_number = dictionary.get("storeNumber") if dictionary.get("storeNumber") else APIHelper.SKIP
        store_name = dictionary.get("storeName") if dictionary.get("storeName") else APIHelper.SKIP
        chain_code = dictionary.get("chainCode") if dictionary.get("chainCode") else APIHelper.SKIP
        chain_name = dictionary.get("chainName") if dictionary.get("chainName") else APIHelper.SKIP
        merchant_id = dictionary.get("merchantId") if dictionary.get("merchantId") else APIHelper.SKIP
        merchant_name = dictionary.get("merchantName") if dictionary.get("merchantName") else APIHelper.SKIP
        # Return an object of this model
        return cls(sales_organization_code,
                   sales_organization_name,
                   sales_channel_code,
                   sales_channel_name,
                   partner_id,
                   partner_name,
                   region_code,
                   region_name,
                   national_code,
                   national_name,
                   division_code,
                   division_name,
                   super_chain_code,
                   super_chain_name,
                   store_number,
                   store_name,
                   chain_code,
                   chain_name,
                   merchant_id,
                   merchant_name)
