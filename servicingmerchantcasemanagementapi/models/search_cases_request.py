# -*- coding: utf-8 -*-

"""
servicingmerchantcasemanagementapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from servicingmerchantcasemanagementapi.api_helper import APIHelper
from servicingmerchantcasemanagementapi.models.date_range_search import DateRangeSearch
from servicingmerchantcasemanagementapi.models.entity_info import EntityInfo
from servicingmerchantcasemanagementapi.models.pagination_type import PaginationType
from servicingmerchantcasemanagementapi.models.search_case_info_request import SearchCaseInfoRequest
from servicingmerchantcasemanagementapi.models.sort_results_by import SortResultsBy


class SearchCasesRequest(object):

    """Implementation of the 'SearchCasesRequest' model.

    Request for Case Search .

    Attributes:
        entity_info (EntityInfo): Pass entityInfo related to
            region/national/division/superChain/store/chain or merchant for
            which this search will happen. Pass entityType and entityValue, it
            should map to a single entity only.
        date_type (DateTypeEnum): Type of date
        date_range (DateRangeSearch): Date range, can be between 1 and 60
            days.
        case_info (SearchCaseInfoRequest): Case information.
        pagination_request (PaginationType): Pagination requested details
        sort_results_by (List[SortResultsBy]): Select up to four fields for
            sorting the search results. Fields that can be selected are
            entityValue, caseNumber, category, caseType, origin, status and
            priority.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "date_type": 'dateType',
        "date_range": 'dateRange',
        "entity_info": 'entityInfo',
        "case_info": 'caseInfo',
        "pagination_request": 'paginationRequest',
        "sort_results_by": 'sortResultsBy'
    }

    _optionals = [
        'entity_info',
        'case_info',
        'pagination_request',
        'sort_results_by',
    ]

    def __init__(self,
                 date_type=None,
                 date_range=None,
                 entity_info=APIHelper.SKIP,
                 case_info=APIHelper.SKIP,
                 pagination_request=APIHelper.SKIP,
                 sort_results_by=APIHelper.SKIP):
        """Constructor for the SearchCasesRequest class"""

        # Initialize members of the class
        if entity_info is not APIHelper.SKIP:
            self.entity_info = entity_info 
        self.date_type = date_type 
        self.date_range = date_range 
        if case_info is not APIHelper.SKIP:
            self.case_info = case_info 
        if pagination_request is not APIHelper.SKIP:
            self.pagination_request = pagination_request 
        if sort_results_by is not APIHelper.SKIP:
            self.sort_results_by = sort_results_by 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        date_type = dictionary.get("dateType") if dictionary.get("dateType") else None
        date_range = DateRangeSearch.from_dictionary(dictionary.get('dateRange')) if dictionary.get('dateRange') else None
        entity_info = EntityInfo.from_dictionary(dictionary.get('entityInfo')) if 'entityInfo' in dictionary.keys() else APIHelper.SKIP
        case_info = SearchCaseInfoRequest.from_dictionary(dictionary.get('caseInfo')) if 'caseInfo' in dictionary.keys() else APIHelper.SKIP
        pagination_request = PaginationType.from_dictionary(dictionary.get('paginationRequest')) if 'paginationRequest' in dictionary.keys() else APIHelper.SKIP
        sort_results_by = None
        if dictionary.get('sortResultsBy') is not None:
            sort_results_by = [SortResultsBy.from_dictionary(x) for x in dictionary.get('sortResultsBy')]
        else:
            sort_results_by = APIHelper.SKIP
        # Return an object of this model
        return cls(date_type,
                   date_range,
                   entity_info,
                   case_info,
                   pagination_request,
                   sort_results_by)
