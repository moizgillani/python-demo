# -*- coding: utf-8 -*-

"""
servicingmerchantcasemanagementapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from servicingmerchantcasemanagementapi.api_helper import APIHelper


class CaseInfo(object):

    """Implementation of the 'CaseInfo' model.

    Information needed to create a case. If the Entity Type is MERCHANT or
    CHAIN, case type is required

    Attributes:
        subject (str): Brief description of the requstorâ€™s issue
        category (str): Case category. High level grouping of case types
        case_type (str): Case type for selected category for the case
        reason (str): Reason for creating the case
        description (str): Description of a case
        origin (str): Indicates the source of the case.
        priority (PriorityEnum): Defines time limit for case resolution

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "subject": 'subject',
        "category": 'category',
        "reason": 'reason',
        "description": 'description',
        "origin": 'origin',
        "case_type": 'caseType',
        "priority": 'priority'
    }

    _optionals = [
        'case_type',
        'priority',
    ]

    def __init__(self,
                 subject=None,
                 category=None,
                 reason=None,
                 description=None,
                 origin=None,
                 case_type=APIHelper.SKIP,
                 priority=APIHelper.SKIP):
        """Constructor for the CaseInfo class"""

        # Initialize members of the class
        self.subject = subject 
        self.category = category 
        if case_type is not APIHelper.SKIP:
            self.case_type = case_type 
        self.reason = reason 
        self.description = description 
        self.origin = origin 
        if priority is not APIHelper.SKIP:
            self.priority = priority 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        subject = dictionary.get("subject") if dictionary.get("subject") else None
        category = dictionary.get("category") if dictionary.get("category") else None
        reason = dictionary.get("reason") if dictionary.get("reason") else None
        description = dictionary.get("description") if dictionary.get("description") else None
        origin = dictionary.get("origin") if dictionary.get("origin") else None
        case_type = dictionary.get("caseType") if dictionary.get("caseType") else APIHelper.SKIP
        priority = dictionary.get("priority") if dictionary.get("priority") else APIHelper.SKIP
        # Return an object of this model
        return cls(subject,
                   category,
                   reason,
                   description,
                   origin,
                   case_type,
                   priority)
