# -*- coding: utf-8 -*-

"""
servicingmerchantcasemanagementapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from servicingmerchantcasemanagementapi.api_helper import APIHelper
from servicingmerchantcasemanagementapi.models.case_list import CaseList
from servicingmerchantcasemanagementapi.models.pagination_response import PaginationResponse


class SearchCasesResponse(object):

    """Implementation of the 'SearchCasesResponse' model.

    List of Cases will be returned in the Search Response from WolrdPay

    Attributes:
        case_list (List[CaseList]): Case list details for selected case
            criteria.
        pagination_response (PaginationResponse): Pagination response details

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "case_list": 'caseList',
        "pagination_response": 'paginationResponse'
    }

    _optionals = [
        'case_list',
        'pagination_response',
    ]

    def __init__(self,
                 case_list=APIHelper.SKIP,
                 pagination_response=APIHelper.SKIP):
        """Constructor for the SearchCasesResponse class"""

        # Initialize members of the class
        if case_list is not APIHelper.SKIP:
            self.case_list = case_list 
        if pagination_response is not APIHelper.SKIP:
            self.pagination_response = pagination_response 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        case_list = None
        if dictionary.get('caseList') is not None:
            case_list = [CaseList.from_dictionary(x) for x in dictionary.get('caseList')]
        else:
            case_list = APIHelper.SKIP
        pagination_response = PaginationResponse.from_dictionary(dictionary.get('paginationResponse')) if 'paginationResponse' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(case_list,
                   pagination_response)
