# -*- coding: utf-8 -*-

"""
servicingmerchantcasemanagementapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from servicingmerchantcasemanagementapi.api_helper import APIHelper
from servicingmerchantcasemanagementapi.models.hierarchy import Hierarchy
from servicingmerchantcasemanagementapi.models.search_case_info_response import SearchCaseInfoResponse


class CaseList(object):

    """Implementation of the 'CaseList' model.

    List of cases associated with
    salesOrganization/salesChannel/partner/region/national/division/superChain/
    store/chain or merchant.

    Attributes:
        case_hierarchy (Hierarchy): Case hierarchy details.
        case_info (SearchCaseInfoResponse): Case information details.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "case_hierarchy": 'caseHierarchy',
        "case_info": 'caseInfo'
    }

    _optionals = [
        'case_hierarchy',
        'case_info',
    ]

    def __init__(self,
                 case_hierarchy=APIHelper.SKIP,
                 case_info=APIHelper.SKIP):
        """Constructor for the CaseList class"""

        # Initialize members of the class
        if case_hierarchy is not APIHelper.SKIP:
            self.case_hierarchy = case_hierarchy 
        if case_info is not APIHelper.SKIP:
            self.case_info = case_info 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        case_hierarchy = Hierarchy.from_dictionary(dictionary.get('caseHierarchy')) if 'caseHierarchy' in dictionary.keys() else APIHelper.SKIP
        case_info = SearchCaseInfoResponse.from_dictionary(dictionary.get('caseInfo')) if 'caseInfo' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(case_hierarchy,
                   case_info)
